module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateResult {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createResult(data: ResultCreateInput!): Result!
  updateResult(data: ResultUpdateInput!, where: ResultWhereUniqueInput!): Result
  updateManyResults(data: ResultUpdateManyMutationInput!, where: ResultWhereInput): BatchPayload!
  upsertResult(where: ResultWhereUniqueInput!, create: ResultCreateInput!, update: ResultUpdateInput!): Result!
  deleteResult(where: ResultWhereUniqueInput!): Result
  deleteManyResults(where: ResultWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  result(where: ResultWhereUniqueInput!): Result
  results(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Result]!
  resultsConnection(where: ResultWhereInput, orderBy: ResultOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResultConnection!
  node(id: ID!): Node
}

type Result {
  id: ID!
  drawnumber: Int!
  drawdate: DateTime!
  first: String!
  second: String!
  third: String!
  starters: [String!]!
  consolations: [String!]!
}

type ResultConnection {
  pageInfo: PageInfo!
  edges: [ResultEdge]!
  aggregate: AggregateResult!
}

input ResultCreateconsolationsInput {
  set: [String!]
}

input ResultCreateInput {
  id: ID
  drawnumber: Int!
  drawdate: DateTime!
  first: String!
  second: String!
  third: String!
  starters: ResultCreatestartersInput
  consolations: ResultCreateconsolationsInput
}

input ResultCreatestartersInput {
  set: [String!]
}

type ResultEdge {
  node: Result!
  cursor: String!
}

enum ResultOrderByInput {
  id_ASC
  id_DESC
  drawnumber_ASC
  drawnumber_DESC
  drawdate_ASC
  drawdate_DESC
  first_ASC
  first_DESC
  second_ASC
  second_DESC
  third_ASC
  third_DESC
}

type ResultPreviousValues {
  id: ID!
  drawnumber: Int!
  drawdate: DateTime!
  first: String!
  second: String!
  third: String!
  starters: [String!]!
  consolations: [String!]!
}

type ResultSubscriptionPayload {
  mutation: MutationType!
  node: Result
  updatedFields: [String!]
  previousValues: ResultPreviousValues
}

input ResultSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResultWhereInput
  AND: [ResultSubscriptionWhereInput!]
}

input ResultUpdateconsolationsInput {
  set: [String!]
}

input ResultUpdateInput {
  drawnumber: Int
  drawdate: DateTime
  first: String
  second: String
  third: String
  starters: ResultUpdatestartersInput
  consolations: ResultUpdateconsolationsInput
}

input ResultUpdateManyMutationInput {
  drawnumber: Int
  drawdate: DateTime
  first: String
  second: String
  third: String
  starters: ResultUpdatestartersInput
  consolations: ResultUpdateconsolationsInput
}

input ResultUpdatestartersInput {
  set: [String!]
}

input ResultWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  drawnumber: Int
  drawnumber_not: Int
  drawnumber_in: [Int!]
  drawnumber_not_in: [Int!]
  drawnumber_lt: Int
  drawnumber_lte: Int
  drawnumber_gt: Int
  drawnumber_gte: Int
  drawdate: DateTime
  drawdate_not: DateTime
  drawdate_in: [DateTime!]
  drawdate_not_in: [DateTime!]
  drawdate_lt: DateTime
  drawdate_lte: DateTime
  drawdate_gt: DateTime
  drawdate_gte: DateTime
  first: String
  first_not: String
  first_in: [String!]
  first_not_in: [String!]
  first_lt: String
  first_lte: String
  first_gt: String
  first_gte: String
  first_contains: String
  first_not_contains: String
  first_starts_with: String
  first_not_starts_with: String
  first_ends_with: String
  first_not_ends_with: String
  second: String
  second_not: String
  second_in: [String!]
  second_not_in: [String!]
  second_lt: String
  second_lte: String
  second_gt: String
  second_gte: String
  second_contains: String
  second_not_contains: String
  second_starts_with: String
  second_not_starts_with: String
  second_ends_with: String
  second_not_ends_with: String
  third: String
  third_not: String
  third_in: [String!]
  third_not_in: [String!]
  third_lt: String
  third_lte: String
  third_gt: String
  third_gte: String
  third_contains: String
  third_not_contains: String
  third_starts_with: String
  third_not_starts_with: String
  third_ends_with: String
  third_not_ends_with: String
  AND: [ResultWhereInput!]
}

input ResultWhereUniqueInput {
  id: ID
}

type Subscription {
  result(where: ResultSubscriptionWhereInput): ResultSubscriptionPayload
}
`
      }
    