// Code generated by Prisma (prisma@1.34.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  result: (where?: ResultWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  result: (where: ResultWhereUniqueInput) => ResultNullablePromise;
  results: (args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Result>;
  resultsConnection: (args?: {
    where?: ResultWhereInput;
    orderBy?: ResultOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResultConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createResult: (data: ResultCreateInput) => ResultPromise;
  updateResult: (args: {
    data: ResultUpdateInput;
    where: ResultWhereUniqueInput;
  }) => ResultPromise;
  updateManyResults: (args: {
    data: ResultUpdateManyMutationInput;
    where?: ResultWhereInput;
  }) => BatchPayloadPromise;
  upsertResult: (args: {
    where: ResultWhereUniqueInput;
    create: ResultCreateInput;
    update: ResultUpdateInput;
  }) => ResultPromise;
  deleteResult: (where: ResultWhereUniqueInput) => ResultPromise;
  deleteManyResults: (where?: ResultWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  result: (
    where?: ResultSubscriptionWhereInput
  ) => ResultSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ResultOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "drawnumber_ASC"
  | "drawnumber_DESC"
  | "drawdate_ASC"
  | "drawdate_DESC"
  | "first_ASC"
  | "first_DESC"
  | "second_ASC"
  | "second_DESC"
  | "third_ASC"
  | "third_DESC";

export interface ResultCreateInput {
  id?: Maybe<ID_Input>;
  drawnumber: Int;
  drawdate: DateTimeInput;
  first: String;
  second: String;
  third: String;
  starters?: Maybe<ResultCreatestartersInput>;
  consolations?: Maybe<ResultCreateconsolationsInput>;
}

export type ResultWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ResultCreatestartersInput {
  set?: Maybe<String[] | String>;
}

export interface ResultCreateconsolationsInput {
  set?: Maybe<String[] | String>;
}

export interface ResultUpdateInput {
  drawnumber?: Maybe<Int>;
  drawdate?: Maybe<DateTimeInput>;
  first?: Maybe<String>;
  second?: Maybe<String>;
  third?: Maybe<String>;
  starters?: Maybe<ResultUpdatestartersInput>;
  consolations?: Maybe<ResultUpdateconsolationsInput>;
}

export interface ResultUpdatestartersInput {
  set?: Maybe<String[] | String>;
}

export interface ResultSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResultWhereInput>;
  AND?: Maybe<ResultSubscriptionWhereInput[] | ResultSubscriptionWhereInput>;
}

export interface ResultWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  drawnumber?: Maybe<Int>;
  drawnumber_not?: Maybe<Int>;
  drawnumber_in?: Maybe<Int[] | Int>;
  drawnumber_not_in?: Maybe<Int[] | Int>;
  drawnumber_lt?: Maybe<Int>;
  drawnumber_lte?: Maybe<Int>;
  drawnumber_gt?: Maybe<Int>;
  drawnumber_gte?: Maybe<Int>;
  drawdate?: Maybe<DateTimeInput>;
  drawdate_not?: Maybe<DateTimeInput>;
  drawdate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  drawdate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  drawdate_lt?: Maybe<DateTimeInput>;
  drawdate_lte?: Maybe<DateTimeInput>;
  drawdate_gt?: Maybe<DateTimeInput>;
  drawdate_gte?: Maybe<DateTimeInput>;
  first?: Maybe<String>;
  first_not?: Maybe<String>;
  first_in?: Maybe<String[] | String>;
  first_not_in?: Maybe<String[] | String>;
  first_lt?: Maybe<String>;
  first_lte?: Maybe<String>;
  first_gt?: Maybe<String>;
  first_gte?: Maybe<String>;
  first_contains?: Maybe<String>;
  first_not_contains?: Maybe<String>;
  first_starts_with?: Maybe<String>;
  first_not_starts_with?: Maybe<String>;
  first_ends_with?: Maybe<String>;
  first_not_ends_with?: Maybe<String>;
  second?: Maybe<String>;
  second_not?: Maybe<String>;
  second_in?: Maybe<String[] | String>;
  second_not_in?: Maybe<String[] | String>;
  second_lt?: Maybe<String>;
  second_lte?: Maybe<String>;
  second_gt?: Maybe<String>;
  second_gte?: Maybe<String>;
  second_contains?: Maybe<String>;
  second_not_contains?: Maybe<String>;
  second_starts_with?: Maybe<String>;
  second_not_starts_with?: Maybe<String>;
  second_ends_with?: Maybe<String>;
  second_not_ends_with?: Maybe<String>;
  third?: Maybe<String>;
  third_not?: Maybe<String>;
  third_in?: Maybe<String[] | String>;
  third_not_in?: Maybe<String[] | String>;
  third_lt?: Maybe<String>;
  third_lte?: Maybe<String>;
  third_gt?: Maybe<String>;
  third_gte?: Maybe<String>;
  third_contains?: Maybe<String>;
  third_not_contains?: Maybe<String>;
  third_starts_with?: Maybe<String>;
  third_not_starts_with?: Maybe<String>;
  third_ends_with?: Maybe<String>;
  third_not_ends_with?: Maybe<String>;
  AND?: Maybe<ResultWhereInput[] | ResultWhereInput>;
}

export interface ResultUpdateconsolationsInput {
  set?: Maybe<String[] | String>;
}

export interface ResultUpdateManyMutationInput {
  drawnumber?: Maybe<Int>;
  drawdate?: Maybe<DateTimeInput>;
  first?: Maybe<String>;
  second?: Maybe<String>;
  third?: Maybe<String>;
  starters?: Maybe<ResultUpdatestartersInput>;
  consolations?: Maybe<ResultUpdateconsolationsInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateResult {
  count: Int;
}

export interface AggregateResultPromise
  extends Promise<AggregateResult>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResultSubscription
  extends Promise<AsyncIterator<AggregateResult>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Result {
  id: ID_Output;
  drawnumber: Int;
  drawdate: DateTimeOutput;
  first: String;
  second: String;
  third: String;
  starters: String[];
  consolations: String[];
}

export interface ResultPromise extends Promise<Result>, Fragmentable {
  id: () => Promise<ID_Output>;
  drawnumber: () => Promise<Int>;
  drawdate: () => Promise<DateTimeOutput>;
  first: () => Promise<String>;
  second: () => Promise<String>;
  third: () => Promise<String>;
  starters: () => Promise<String[]>;
  consolations: () => Promise<String[]>;
}

export interface ResultSubscription
  extends Promise<AsyncIterator<Result>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  drawnumber: () => Promise<AsyncIterator<Int>>;
  drawdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  first: () => Promise<AsyncIterator<String>>;
  second: () => Promise<AsyncIterator<String>>;
  third: () => Promise<AsyncIterator<String>>;
  starters: () => Promise<AsyncIterator<String[]>>;
  consolations: () => Promise<AsyncIterator<String[]>>;
}

export interface ResultNullablePromise
  extends Promise<Result | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  drawnumber: () => Promise<Int>;
  drawdate: () => Promise<DateTimeOutput>;
  first: () => Promise<String>;
  second: () => Promise<String>;
  third: () => Promise<String>;
  starters: () => Promise<String[]>;
  consolations: () => Promise<String[]>;
}

export interface ResultConnection {
  pageInfo: PageInfo;
  edges: ResultEdge[];
}

export interface ResultConnectionPromise
  extends Promise<ResultConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResultEdge>>() => T;
  aggregate: <T = AggregateResultPromise>() => T;
}

export interface ResultConnectionSubscription
  extends Promise<AsyncIterator<ResultConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResultEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResultSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ResultSubscriptionPayload {
  mutation: MutationType;
  node: Result;
  updatedFields: String[];
  previousValues: ResultPreviousValues;
}

export interface ResultSubscriptionPayloadPromise
  extends Promise<ResultSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResultPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResultPreviousValuesPromise>() => T;
}

export interface ResultSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResultSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResultSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResultPreviousValuesSubscription>() => T;
}

export interface ResultEdge {
  node: Result;
  cursor: String;
}

export interface ResultEdgePromise extends Promise<ResultEdge>, Fragmentable {
  node: <T = ResultPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResultEdgeSubscription
  extends Promise<AsyncIterator<ResultEdge>>,
    Fragmentable {
  node: <T = ResultSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ResultPreviousValues {
  id: ID_Output;
  drawnumber: Int;
  drawdate: DateTimeOutput;
  first: String;
  second: String;
  third: String;
  starters: String[];
  consolations: String[];
}

export interface ResultPreviousValuesPromise
  extends Promise<ResultPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  drawnumber: () => Promise<Int>;
  drawdate: () => Promise<DateTimeOutput>;
  first: () => Promise<String>;
  second: () => Promise<String>;
  third: () => Promise<String>;
  starters: () => Promise<String[]>;
  consolations: () => Promise<String[]>;
}

export interface ResultPreviousValuesSubscription
  extends Promise<AsyncIterator<ResultPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  drawnumber: () => Promise<AsyncIterator<Int>>;
  drawdate: () => Promise<AsyncIterator<DateTimeOutput>>;
  first: () => Promise<AsyncIterator<String>>;
  second: () => Promise<AsyncIterator<String>>;
  third: () => Promise<AsyncIterator<String>>;
  starters: () => Promise<AsyncIterator<String[]>>;
  consolations: () => Promise<AsyncIterator<String[]>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Result",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
